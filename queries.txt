//If an artist wants to create an event in their RecordLabel City. 

SELECT A.username Name, C.city City
FROM user_user AS A 
	JOIN artist_artist as B 
	ON A.id = B.user_id 
	JOIN recordLabel_recordlabel as C 
	ON B.recordlabel_id= C.id
WHERE C.City = (SELECT location 
		FROM event_event)


//Album with the most tracks shows up and follows a descending order
SELECT name,count
FROM album_album
WHERE count =1
GROUP BY name
ORDER BY count DESC

//Table for User with total number of albums and total number of tracks 
SELECT A.username Name, count(B.id) 'Number of Albums', B.contt 'Number of Tracks'
FROM user_user as A join album_album as B on A.id = B.user_id
GROUP BY A.username
//////////////////////////////////////////////////////////////////////////////////////////////

TRIGGER








/////////////////////////FIRST SET////////////////////FIRST SET//////////////////////////////

//Search for Specific Genre
//('1','Country')
SELECT A.album_id, A.id, B.genre
FROM track_track A join tag_tag B on A.tag_id=B.id
WHERE A.id = '1'

('2','Pop')
SELECT A.album_id, A.id, B.genre
FROM track_track A join tag_tag B on A.tag_id=B.id
WHERE A.id = '2'

('3','Rock')
SELECT A.album_id, A.id, B.genre
FROM track_track A join tag_tag B on A.tag_id=B.id
WHERE A.id = '3'

('4', 'Blues')
SELECT A.album_id, A.id, B.genre
FROM track_track A join tag_tag B on A.tag_id=B.id
WHERE A.id = '4'

('5', 'Rap')

SELECT A.album_id, A.id, B.genre
FROM track_track A join tag_tag B on A.tag_id=B.id
WHERE A.id = '5'

//Users with more than 4 tracks in the album 
SELECT A.username Name, B.count 'Count of Tracks'
FROM user_user as A join album_album as B on A.id = B.user_id
WHERE count>4


//User most to least popular --> artist edition
SELECT username, followers
FROM user_user as A 
WHERE followers > 50 
GROUP BY username
ORDER BY followers DESC

//User most to least popular --> those who are not artist
SELECT username, followers
FROM user_user as A 
WHERE followers < 50 
GROUP BY username
ORDER BY followers DESC


//Total Number of User in the system
SELECT id, COUNT(*)
FROM user_user

//Total Numbers of Albums in the system
SELECT id, COUNT(*)
FROM album_album

//Total Number of Tracks in the system 
SELECT id, COUNT(*)
FROM track_track

//User with Average number of tracks
SELECT A.username Name, AVG(B.count)'Average Count of Tracks'
FROM user_user as A join album_album as B on A.id = B.user_id
GROUP BY A.username
